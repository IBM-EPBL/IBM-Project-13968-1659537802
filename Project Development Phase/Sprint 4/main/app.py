from flask import Flask, render_template, request, redirect, url_for, session
import ibm_db
from werkzeug.utils import secure_filename
import re
from datetime import timedelta
from flask_session import Session
import ibm_boto3
import os
import os.path
from ibm_botocore.client import Config, ClientError
from datetime import date as date_n
from email_alert import sendamail
import schedule
import time
from navi import nav
def number_of_days(date_1, date_2):  
    return (date_2 - date_1).days
app = Flask(__name__)
app.config["SESSION_PERMANENT"] = True
app.config["SESSION_TYPE"] = "filesystem"
app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(minutes=30)
Session(app)
app.secret_key = 'a'
COS_ENDPOINT ="https://s3.jp-tok.cloud-object-storage.appdomain.cloud"
COS_API_KEY_ID ="Zph5PM0Ea1KjdpI2tW6605gi4ms_ewOObsa2AJ23J9Wj"
COS_INSTANCE_CRN ="crn:v1:bluemix:public:cloud-object-storage:global:a/76a3362726624d279ca4e16063b37cd9:07c5e33b-b851-4224-bf7e-8f68f0ced30e::"
cos = ibm_boto3.client(service_name="s3",
    ibm_api_key_id=COS_API_KEY_ID,
    ibm_service_instance_id=COS_INSTANCE_CRN,
    config=Config(signature_version="oauth"),
    endpoint_url=COS_ENDPOINT
)

conn = ibm_db.connect("DATABASE=bludb;HOSTNAME=125f9f61-9715-46f9-9399-c8177b21803b.c1ogj3sd0tgtu0lqde00.databases.appdomain.cloud;PORT=30426;SECURITY=SSL;SSLServerCertificate=DigiCertGlobalRootCA.crt;UID=ycv60216;PWD=KfIYwigRBeFSVcZS",'','')
# conn = ibm_db.connect("DATABASE=bludb;HOSTNAME=9938aec0-8105-433e-8bf9-0fbb7e483086.c1ogj3sd0tgtu0lqde00.databases.appdomain.cloud;PORT=32459;SECURITY=SSL;SSLServerCertificate=DigiCertGlobalRootCA.crt;UID=dcj21936;PWD=SCQV6U0l9lhEOegs",'','')
if conn:
    print("tested")
else:
    exit(0)
#To create table uncomment this
# drop_query="Drop TABLE users if Exists"
# ibm_db.exec_immediate(conn,drop_query)
# create_query="CREATE TABLE users(uname varchar(20) NOT NULL,DOB date NOT NULL,Mobile varchar(20) NOT NULL,email varchar(50) NOT NULL PRIMARY KEY,addr varchar(100) not null,city varchar(20),pincode varchar(20) NOT NULL,password varchar(20) NOT NULL,is_eligible varchar(20),joined TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP);"
# ibm_db.exec_immediate(conn,create_query)
# drop_quer="Drop TABLE eligible if Exists"
# ibm_db.exec_immediate(conn,drop_quer)
# create_eligible="CREATE TABLE eligible(elig_email varchar(50) NOT NULL PRIMARY KEY,gender varchar(20) DEFAULT NULL,bg varchar(20) DEFAULT NULL,weight INTEGER DEFAULT NULL,height INTEGER DEFAULT NULL,bmi varchar(20) DEFAULT NULL,chol INTEGER DEFAULT NULL,bp INTEGER DEFAULT NULL,don_date date DEFAULT NULL,certificate varchar(100) DEFAULT NULL,check1 varchar(100) DEFAULT NULL,check2 varchar(100) DEFAULT NULL,check3 varchar(100) DEFAULT NULL);"
# ibm_db.exec_immediate(conn,create_eligible)
# drop_query="Drop TABLE hospital if Exists"
# ibm_db.exec_immediate(conn,drop_query)
# create_query="CREATE TABLE hospital(hospid varchar(20) NOT NULL PRIMARY KEY,hosp_name varchar(20),contact INTEGER,location varchar(50),address varchar(100),pass varchar(20));"
# ibm_db.exec_immediate(conn,create_query)
# insert_quer="INSERT INTO hospital(hospid,hosp_name,contact,location,address,pass) VALUES ('TN195001123','Surya','123456789','CHENNAI','SSN College Of Enginnering','varun2000')"
# ibm_db.exec_immediate(conn,insert_quer)
# insert_que="INSERT INTO hospital(hospid,hosp_name,contact,location,address,pass) VALUES ('TN195001111','Ashoka','987654321','CHENNAI','Avichi School','varun2000')"
# ibm_db.exec_immediate(conn,insert_que)
# drop_qu="Drop TABLE prequest if Exists"
# ibm_db.exec_immediate(conn,drop_qu)
# create_quer="CREATE TABLE prequest(request_id INT GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),request_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,hosp_id varchar(20) NOT NULL ,hosp_name varchar(20),location varchar(50),blood_group varchar(20),priority varchar(20),person_name varchar(20) DEFAULT NULL,blood_camp varchar(30),PRIMARY KEY(request_id));"
# ibm_db.exec_immediate(conn,create_quer)
# drop_q="Drop TABLE accepted if Exists"
# ibm_db.exec_immediate(conn,drop_q)
# create_que="CREATE TABLE accepted(r_id INT ,donor_email varchar(50) NOT NULL PRIMARY KEY,donor_name varchar(50),person_name varchar(20) DEFAULT NULL,donate_date date NOT NULL,hospital_id varchar(20) NOT NULL ,b_group varchar(20),prior varchar(20));"
# ibm_db.exec_immediate(conn,create_que)
def eli():
    sql = "SELECT * FROM eligible WHERE elig_email =?"
    stmt = ibm_db.prepare(conn, sql)
    email_elig=session["email"]
    ibm_db.bind_param(stmt, 1, email_elig)
    ibm_db.execute(stmt)
    account = ibm_db.fetch_assoc(stmt)
    if account:
        bmi=float(ibm_db.result(stmt,5))
        bp=float(ibm_db.result(stmt,7))
        don_date=str(ibm_db.result(stmt,8))
        ck1=ibm_db.result(stmt,10)
        ck2=ibm_db.result(stmt,11)
        ck3=ibm_db.result(stmt,12)
        
        if bmi<24:
            return False
        if bp>180:
            return False
        
        d1=don_date.split('-')
        date_1 = date_n(int(d1[0]),int(d1[1]),int(d1[2]))  
        date_2 = date_n.today()  
        if number_of_days(date_1, date_2)<90:
            return False 

        if ck1!="" or ck2!="" or ck3!="":
            return False
        return True

@app.route('/')
def home():
    return render_template('Home.html')

@app.route('/check')
def check():
    return render_template('Login.html')

@app.route('/hospitalcheck')
def hoscheck():
    return render_template('hospital_login.html')

@app.route('/addnew')
def addnew():
    return render_template('Register.html')


@app.route('/login',methods =['GET', 'POST'])
def login():
    msg = ''
    if request.method == 'POST' :
        email = request.form['email']
        password = request.form['pass']
        sql = "SELECT * FROM users WHERE email =? AND password =?"
        stmtt = ibm_db.prepare(conn, sql)
        ibm_db.bind_param(stmtt, 1, email)
        ibm_db.bind_param(stmtt, 2, password)
        ibm_db.execute(stmtt)
        account = ibm_db.fetch_assoc(stmtt)
        print(account)
        if account:
            msg=ibm_db.result(stmtt,0)
            msgg=ibm_db.result(stmtt,2)
            session["email"]=email
            session["cit"]=ibm_db.result(stmtt,5)
            session["city"]=str(session["cit"])
            session["uname"] = msg
            session["mobile"] = msgg
            if eli()==True:
                session["updated"]=""
            else:
                session["updated"]="You are not eligible"
            return redirect('/dashboard')
        else:
            msg = 'Incorrect username / password !'
            return render_template('Login.html')

@app.route('/hospitallogin',methods =['GET', 'POST'])
def hospitallogin():
    msg = ''
    if request.method == 'POST' :
        ud = request.form['uid']
        password = request.form['pass']
        sql = "SELECT * FROM hospital WHERE hospid =? AND pass =?"
        stmtt = ibm_db.prepare(conn, sql)
        ibm_db.bind_param(stmtt, 1, ud)
        ibm_db.bind_param(stmtt, 2, password)
        ibm_db.execute(stmtt)
        account = ibm_db.fetch_assoc(stmtt)
        print(account)
        if account:
            session["uid"]=ud
            session['hospid']=ibm_db.result(stmtt,0)
            session['hospname']=ibm_db.result(stmtt,1)
            session['hosplocate']=ibm_db.result(stmtt,3)
            return redirect('/hospitaldashboard')
        else:
            msg = 'Incorrect username / password !'
            return render_template('hospital_login.html')


@app.route('/register', methods =['GET', 'POST'])
def register():
    msg = ''
    if request.method == 'POST' :
        uname = request.form['name']
        dob = request.form['dob']
        mobile = request.form['phone']
        email = request.form['email']
        addr = request.form['addr']
        city = request.form['city']
        pin = request.form['pin']
        password = request.form['password']
        sql = "SELECT * FROM users WHERE email =?"
        stmt = ibm_db.prepare(conn, sql)
        ibm_db.bind_param(stmt, 1, email)
        ibm_db.execute(stmt)
        account = ibm_db.fetch_assoc(stmt)
        print(account)
        if account:
            sql = "SELECT * FROM eligible WHERE elig_email =?"
            stmt = ibm_db.prepare(conn, sql)
            ibm_db.bind_param(stmt, 1, email)
            ibm_db.execute(stmt)
            account1 = ibm_db.fetch_assoc(stmt)
            if account1:
                return redirect('/check')
            else:
                session["email"]=email
                return redirect('eligi')
        elif not re.match(r'[^@]+@[^@]+\.[^@]+', email):
            msg = 'Invalid email address !'
        elif not re.match(r'[A-Za-z]+', uname):
            msg = 'name must contain only characters !'
        else:
            insert_sql = "INSERT INTO  users (uname,DOB,Mobile,email,addr,city,pincode,password) VALUES (?, ?, ?, ?, ?, ?, ?, ?)"
            prep_stmt = ibm_db.prepare(conn, insert_sql)
            ibm_db.bind_param(prep_stmt, 1, uname)
            ibm_db.bind_param(prep_stmt, 2, dob)
            ibm_db.bind_param(prep_stmt, 3, mobile)
            ibm_db.bind_param(prep_stmt, 4, email)
            ibm_db.bind_param(prep_stmt, 5, addr)
            ibm_db.bind_param(prep_stmt, 6, city.upper())
            ibm_db.bind_param(prep_stmt, 7, pin)
            ibm_db.bind_param(prep_stmt, 8, password)
            ibm_db.execute(prep_stmt)
            session["email"]=email
            msg = 'You have successfully registered !'
            sendamail(email,"Registration Successful!")
            return render_template('eligibilty.html')
            # return render_template('Login.html')
    elif request.method == 'POST':
        msg = 'Please fill out the form !'
    return render_template('Register.html')


@app.route('/eligibilty', methods =['GET', 'POST'])
def eligibilty():
    msg = ''
    if request.method == 'POST' :
        gender=request.form['gender']
        bg=request.form['bg']
        weight = request.form['weight']
        height = request.form['height']
        ch = request.form['cchk']
        if ch=="Yes":
            chol = request.form['chol']
        bp = request.form['bp']
        bk = request.form['bchk']
        if bk=="Yes":
            don_date = request.form['blood']
            file = request.files['certi']
            file_name=file.filename
            if file_name != '':
                fileam=secure_filename(file.filename)
                file.save(secure_filename(file.filename))
                x=os.path.abspath(fileam)
                with open(x, 'rb') as data:
                    cos.upload_fileobj(data, 'eligibilty-file', fileam)
                os.remove(fileam)
        check1 = request.form.getlist('check1')
        chk1 = ' '.join([str(elem) for elem in check1])
        check2 = request.form.getlist('check2')
        chk2 = ' '.join([str(elem) for elem in check2])
        check3 = request.form.getlist('check3')
        chk3 = ' '.join([str(elem) for elem in check3])
        bmi=(float(weight)/((float(height)/100)*(float(height)/100)))
        bmi=f'{bmi:g}'
        sql = "SELECT * FROM users,eligible WHERE users.email=eligible.elig_email AND eligible.elig_email =?"
        stmt = ibm_db.prepare(conn, sql)
        email_elig=session["email"]
        ibm_db.bind_param(stmt, 1, email_elig)
        ibm_db.execute(stmt)
        account = ibm_db.fetch_assoc(stmt)
        print(account)
        if account:
            msg = 'Account already exists !'
            return render_template("update_eli.html")
        else:
            if ch=="Yes" and bk=="No":
                insert_sql = "INSERT INTO  eligible(elig_email,gender,bg,weight,height,bmi,chol,bp,check1,check2,check3) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
                prep_stmt = ibm_db.prepare(conn, insert_sql)
                ibm_db.bind_param(prep_stmt, 1, email_elig)
                ibm_db.bind_param(prep_stmt, 2, gender)
                ibm_db.bind_param(prep_stmt, 3, bg)
                ibm_db.bind_param(prep_stmt, 4, weight)
                ibm_db.bind_param(prep_stmt, 5, height)
                ibm_db.bind_param(prep_stmt, 6, bmi)
                ibm_db.bind_param(prep_stmt, 7, chol)
                ibm_db.bind_param(prep_stmt, 8, bp)
                ibm_db.bind_param(prep_stmt, 9, chk1)
                ibm_db.bind_param(prep_stmt, 10, chk2)
                ibm_db.bind_param(prep_stmt, 11, chk3)
                ibm_db.execute(prep_stmt)
                if eli()==True:
                    sql = "UPDATE users SET is_eligible =? WHERE email =?"
                    stmt = ibm_db.prepare(conn, sql)
                    ibm_db.bind_param(stmt, 1, "True")
                    ibm_db.bind_param(stmt, 2, email_elig)
                    ibm_db.execute(stmt)
                else:
                    sql = "UPDATE users SET is_eligible =? WHERE email =?"
                    stmt = ibm_db.prepare(conn, sql)
                    ibm_db.bind_param(stmt, 1, "False")
                    ibm_db.bind_param(stmt, 2, email_elig)
                    ibm_db.execute(stmt)      
                    session["updated"]="You are not eligible"             
                return redirect('/dashboard')
            elif ch=="Yes" and bk=="Yes":
                if file_name == '':
                    insert_sql = "INSERT INTO  eligible(elig_email,gender,bg,weight,height,bmi,chol,bp,don_date,check1,check2,check3) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
                    prep_stmt = ibm_db.prepare(conn, insert_sql)
                    ibm_db.bind_param(prep_stmt, 1, email_elig)
                    ibm_db.bind_param(prep_stmt, 2, gender)
                    ibm_db.bind_param(prep_stmt, 3, bg)
                    ibm_db.bind_param(prep_stmt, 4, weight)
                    ibm_db.bind_param(prep_stmt, 5, height)
                    ibm_db.bind_param(prep_stmt, 6, bmi)
                    ibm_db.bind_param(prep_stmt, 7, chol)
                    ibm_db.bind_param(prep_stmt, 8, bp)
                    ibm_db.bind_param(prep_stmt, 9, don_date)
                    ibm_db.bind_param(prep_stmt, 10, chk1)
                    ibm_db.bind_param(prep_stmt, 11, chk2)
                    ibm_db.bind_param(prep_stmt, 12, chk3)
                    ibm_db.execute(prep_stmt)
                    if eli()==True:
                        sql = "UPDATE users SET is_eligible =? WHERE email =?"
                        stmt = ibm_db.prepare(conn, sql)
                        ibm_db.bind_param(stmt, 1, "True")
                        ibm_db.bind_param(stmt, 2, email_elig)
                        ibm_db.execute(stmt)
                    else:
                        sql = "UPDATE users SET is_eligible =? WHERE email =?"
                        stmt = ibm_db.prepare(conn, sql)
                        ibm_db.bind_param(stmt, 1, "False")
                        ibm_db.bind_param(stmt, 2, email_elig)
                        ibm_db.execute(stmt) 
                        session["updated"]="You are not eligible"
                    return redirect('/dashboard')
                else:
                    fileame=secure_filename(file.filename)
                    insert_sql = "INSERT INTO  eligible(elig_email,gender,bg,weight,height,bmi,chol,bp,don_date,certificate,check1,check2,check3) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
                    prep_stmt = ibm_db.prepare(conn, insert_sql)
                    ibm_db.bind_param(prep_stmt, 1, email_elig)
                    ibm_db.bind_param(prep_stmt, 2, gender)
                    ibm_db.bind_param(prep_stmt, 3, bg)
                    ibm_db.bind_param(prep_stmt, 4, weight)
                    ibm_db.bind_param(prep_stmt, 5, height)
                    ibm_db.bind_param(prep_stmt, 6, bmi)
                    ibm_db.bind_param(prep_stmt, 7, chol)
                    ibm_db.bind_param(prep_stmt, 8, bp)
                    ibm_db.bind_param(prep_stmt, 9, don_date)
                    ibm_db.bind_param(prep_stmt, 10, fileame)
                    ibm_db.bind_param(prep_stmt, 11, chk1)
                    ibm_db.bind_param(prep_stmt, 12, chk2)
                    ibm_db.bind_param(prep_stmt, 13, chk3)
                    ibm_db.execute(prep_stmt)
                    if eli()==True:
                        sql = "UPDATE users SET is_eligible =? WHERE email =?"
                        stmt = ibm_db.prepare(conn, sql)
                        ibm_db.bind_param(stmt, 1, "True")
                        ibm_db.bind_param(stmt, 2, email_elig)
                        ibm_db.execute(stmt)
                    else:
                        sql = "UPDATE users SET is_eligible =? WHERE email =?"
                        stmt = ibm_db.prepare(conn, sql)
                        ibm_db.bind_param(stmt, 1, "False")
                        ibm_db.bind_param(stmt, 2, email_elig)
                        ibm_db.execute(stmt) 
                        session["updated"]="You are not eligible"
                    return redirect('/dashboard')
            elif ch=="No" and bk=="No":
                insert_sql = "INSERT INTO  eligible(elig_email,gender,bg,weight,height,bmi,bp,check1,check2,check3) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
                prep_stmt = ibm_db.prepare(conn, insert_sql)
                ibm_db.bind_param(prep_stmt, 1, email_elig)
                ibm_db.bind_param(prep_stmt, 2, gender)
                ibm_db.bind_param(prep_stmt, 3, bg)
                ibm_db.bind_param(prep_stmt, 4, weight)
                ibm_db.bind_param(prep_stmt, 5, height)
                ibm_db.bind_param(prep_stmt, 6, bmi)
                ibm_db.bind_param(prep_stmt, 7, bp)
                ibm_db.bind_param(prep_stmt, 8, chk1)
                ibm_db.bind_param(prep_stmt, 9, chk2)
                ibm_db.bind_param(prep_stmt, 10, chk3)
                ibm_db.execute(prep_stmt)
                if eli()==True:
                    sql = "UPDATE users SET is_eligible =? WHERE email =?"
                    stmt = ibm_db.prepare(conn, sql)
                    ibm_db.bind_param(stmt, 1, "True")
                    ibm_db.bind_param(stmt, 2, email_elig)
                    ibm_db.execute(stmt)
                else:
                    sql = "UPDATE users SET is_eligible =? WHERE email =?"
                    stmt = ibm_db.prepare(conn, sql)
                    ibm_db.bind_param(stmt, 1, "False")
                    ibm_db.bind_param(stmt, 2, email_elig)
                    ibm_db.execute(stmt) 
                    session["updated"]="You are not eligible"
                return redirect('/dashboard')
            elif ch=="No" and bk=="Yes":
                if file_name == '':
                    insert_sql = "INSERT INTO  eligible(elig_email,gender,bg,weight,height,bmi,bp,don_date,check1,check2,check3) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
                    prep_stmt = ibm_db.prepare(conn, insert_sql)
                    ibm_db.bind_param(prep_stmt, 1, email_elig)
                    ibm_db.bind_param(prep_stmt, 2, gender)
                    ibm_db.bind_param(prep_stmt, 3, bg)
                    ibm_db.bind_param(prep_stmt, 4, weight)
                    ibm_db.bind_param(prep_stmt, 5, height)
                    ibm_db.bind_param(prep_stmt, 6, bmi)
                    ibm_db.bind_param(prep_stmt, 7, bp)
                    ibm_db.bind_param(prep_stmt, 8, don_date)
                    ibm_db.bind_param(prep_stmt, 9, chk1)
                    ibm_db.bind_param(prep_stmt, 10, chk2)
                    ibm_db.bind_param(prep_stmt, 11, chk3)
                    ibm_db.execute(prep_stmt)
                    if eli()==True:
                        sql = "UPDATE users SET is_eligible =? WHERE email =?"
                        stmt = ibm_db.prepare(conn, sql)
                        ibm_db.bind_param(stmt, 1, "True")
                        ibm_db.bind_param(stmt, 2, email_elig)
                        ibm_db.execute(stmt)
                    else:
                        sql = "UPDATE users SET is_eligible =? WHERE email =?"
                        stmt = ibm_db.prepare(conn, sql)
                        ibm_db.bind_param(stmt, 1, "False")
                        ibm_db.bind_param(stmt, 2, email_elig)
                        ibm_db.execute(stmt) 
                        session["updated"]="You are not eligible"
                    return redirect('/dashboard')
                else:
                    fileame=secure_filename(file.filename)
                    insert_sql = "INSERT INTO  eligible(elig_email,gender,bg,weight,height,bmi,bp,don_date,certificate,check1,check2,check3) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
                    prep_stmt = ibm_db.prepare(conn, insert_sql)
                    ibm_db.bind_param(prep_stmt, 1, email_elig)
                    ibm_db.bind_param(prep_stmt, 2, gender)
                    ibm_db.bind_param(prep_stmt, 3, bg)
                    ibm_db.bind_param(prep_stmt, 4, weight)
                    ibm_db.bind_param(prep_stmt, 5, height)
                    ibm_db.bind_param(prep_stmt, 6, bmi)
                    ibm_db.bind_param(prep_stmt, 7, bp)
                    ibm_db.bind_param(prep_stmt, 8, don_date)
                    ibm_db.bind_param(prep_stmt, 9, fileame)
                    ibm_db.bind_param(prep_stmt, 10, chk1)
                    ibm_db.bind_param(prep_stmt, 11, chk2)
                    ibm_db.bind_param(prep_stmt, 12, chk3)
                    ibm_db.execute(prep_stmt)
                    if eli()==True:
                        sql = "UPDATE users SET is_eligible =? WHERE email =?"
                        stmt = ibm_db.prepare(conn, sql)
                        ibm_db.bind_param(stmt, 1, "True")
                        ibm_db.bind_param(stmt, 2, email_elig)
                        ibm_db.execute(stmt)
                    else:
                        sql = "UPDATE users SET is_eligible =? WHERE email =?"
                        stmt = ibm_db.prepare(conn, sql)
                        ibm_db.bind_param(stmt, 1, "False")
                        ibm_db.bind_param(stmt, 2, email_elig)
                        ibm_db.execute(stmt) 
                        session["updated"]="You are not eligible"
                    return redirect('/dashboard')
    elif request.method == 'GET':
        msg = 'Please fill out the form !'
    return redirect('/dashboard')



@app.route('/update_elig',methods =['GET', 'POST'])
def update_elig():
    email=session["email"]
    sql = "SELECT * FROM eligible WHERE elig_email =?"
    stmt = ibm_db.prepare(conn, sql)
    ibm_db.bind_param(stmt, 1, email)
    ibm_db.execute(stmt)
    account = ibm_db.fetch_assoc(stmt)
    if account:
        session["weight"]=ibm_db.result(stmt,3)
        session["height"]=ibm_db.result(stmt,4)
        session["bmi"]=ibm_db.result(stmt,5)
        session["chol"]=ibm_db.result(stmt,6)
        session["bp"]=ibm_db.result(stmt,7)
        session["don_date"]=ibm_db.result(stmt,8)
        session["certificate"]=ibm_db.result(stmt,9)
        session["ck1"]=ibm_db.result(stmt,10)
        session["ck2"]=ibm_db.result(stmt,11)
        session["ck3"]=ibm_db.result(stmt,12)
        bw=request.form['bw']
        if bw=='Yes':
            weight = request.form['weight']
            height = request.form['height']
            if weight!=session["weight"] or height!=session["height"]: 
                bmi=(float(weight)/((float(height)/100)*(float(height)/100)))
                bmi=f'{bmi:g}'
                session["weight"]=weight
                session["height"]=height
                session["bmi"]=bmi
        chl=request.form['chl']
        if chl=='Yes':
            chol = request.form['chol']
            if chol!=session["chol"]:
                session["chol"]=chol
        bps=request.form['bps']
        if bps=='Yes':
            bp = request.form['bp']
            if bp!=session["bp"]:
                session["bp"]=bp
        chk_date=request.form['chk_date']
        if chk_date=='Yes':
            don_date = request.form['don_date']
            file = request.files['certi']
            file_name=file.filename
            if don_date!=session["don_date"]:
                if file_name != '':
                    if session["certificate"] is None:
                        fileam=secure_filename(file.filename)
                        session["certificate"]=fileam
                        file.save(secure_filename(file.filename))
                        x=os.path.abspath(fileam)
                        with open(x, 'rb') as data:
                            cos.upload_fileobj(data, 'eligibilty-file', fileam)
                        os.remove(fileam)
                        session["don_date"]=don_date
                    else:
                        cos.delete_object(Bucket='eligibilty-file', Key=session["certificate"])
                        fileam=secure_filename(file.filename)
                        session["certificate"]=fileam
                        file.save(secure_filename(file.filename))
                        x=os.path.abspath(fileam)
                        with open(x, 'rb') as data:
                            cos.upload_fileobj(data, 'eligibilty-file', fileam)
                        os.remove(fileam)
                        session["don_date"]=don_date
                else:
                    if session["certificate"] is not None:
                        cos.delete_object(Bucket='eligibilty-file', Key=session["certificate"])
                        session["certificate"]=None
                        session["don_date"]=don_date
                    else:
                        session["don_date"]=don_date
        ch=request.form['ch']
        if ch=='Yes':
            check1 = request.form.getlist('check1')
            chk1 = ' '.join([str(elem) for elem in check1])
            check2 = request.form.getlist('check2')
            chk2 = ' '.join([str(elem) for elem in check2])
            check3 = request.form.getlist('check3')
            chk3 = ' '.join([str(elem) for elem in check3])
            if chk1!=session["ck1"] or chk2!=session["ck2"] or chk3!=session["ck3"]: 
                session["ck1"]=chk1
                session["ck2"]=chk2
                session["ck3"]=chk3
        print("check")
        if session["don_date"]=='':
            session["don_date"]='2001-10-20'
        sql = "UPDATE eligible SET weight =?, height =?, bmi =?, chol =?, bp =?, don_date =?, certificate =?, check1 =?, check2 =?, check3 =? WHERE elig_email =?"
        stm = ibm_db.prepare(conn, sql)
        ibm_db.bind_param(stm, 1, session["weight"])
        ibm_db.bind_param(stm, 2, session["height"])
        ibm_db.bind_param(stm, 3, session["bmi"])
        ibm_db.bind_param(stm, 4, session["chol"])
        ibm_db.bind_param(stm, 5, session["bp"])
        ibm_db.bind_param(stm, 6, session["don_date"])
        ibm_db.bind_param(stm, 7, session["certificate"])
        ibm_db.bind_param(stm, 8, session["ck1"])
        ibm_db.bind_param(stm, 9, session["ck2"])
        ibm_db.bind_param(stm, 10, session["ck3"])
        ibm_db.bind_param(stm, 11, email)
        ibm_db.execute(stm)
        if eli()==True:
            sql = "UPDATE users SET is_eligible =? WHERE email =?"
            stmt = ibm_db.prepare(conn, sql)
            ibm_db.bind_param(stmt, 1, "True")
            ibm_db.bind_param(stmt, 2, email)
            ibm_db.execute(stmt)
        else:
            sql = "UPDATE users SET is_eligible =? WHERE email =?"
            stmt = ibm_db.prepare(conn, sql)
            ibm_db.bind_param(stmt, 1, "False")
            ibm_db.bind_param(stmt, 2, email)
            ibm_db.execute(stmt) 
            session["updated"]="You are not eligible"
        sendamail(email,"Health Card Updated Successfully")
        return redirect('/dashboard')
    else:
       return redirect('/eligi')


@app.route('/hospitalrequest',methods =['GET', 'POST'])
def hospitalrequest():
    if not session.get("uid"):
        return redirect("/hospitalcheck")
    else:
        bg = request.form['bg']
        loc = str(session['hosplocate'])
        priority=request.form['priority']
        pname=request.form['pname']
        hospid=session["hospid"]
        hospname=session["hospname"]
        blood_camp=request.form['blood_camp']
        insert_sql = "INSERT INTO  prequest(hosp_id,hosp_name,location,blood_group,priority,person_name,blood_camp) VALUES (?, ?, ?, ?, ?, ?, ?)"
        prep_stmt = ibm_db.prepare(conn, insert_sql)
        ibm_db.bind_param(prep_stmt, 1, hospid)
        ibm_db.bind_param(prep_stmt, 2, hospname)
        ibm_db.bind_param(prep_stmt, 3, loc.upper())
        ibm_db.bind_param(prep_stmt, 4, bg)
        ibm_db.bind_param(prep_stmt, 5, priority.upper())
        ibm_db.bind_param(prep_stmt, 6, pname)
        ibm_db.bind_param(prep_stmt, 7, blood_camp.upper())
        ibm_db.execute(prep_stmt)
        return redirect('/hospitaldashboard')


@app.route('/approved',methods =['GET', 'POST'])
def approved():
    session["chec"]=request.form['chec']
    session["donatedate"]=request.form['dondate']
    sqll = "SELECT * FROM prequest WHERE request_id =?"
    stmt = ibm_db.prepare(conn, sqll)
    ibm_db.bind_param(stmt, 1, int(session["chec"]))
    ibm_db.execute(stmt)
    account = ibm_db.fetch_assoc(stmt)
    if account:
        p_name=ibm_db.result(stmt,7)
        h_id=ibm_db.result(stmt,2)
        b_g=ibm_db.result(stmt,5)
        p=ibm_db.result(stmt,6)
        p=str(p)
        email=session["email"]
        sq = "SELECT * FROM users WHERE email =?"
        stmttt = ibm_db.prepare(conn, sq)
        ibm_db.bind_param(stmttt, 1, email)
        ibm_db.execute(stmttt)
        certi_name=ibm_db.result(stmttt,9)
        certi_name=str(certi_name)
        if certi_name==None:
            cos.delete_object(Bucket='eligibilty-file', Key=certi_name)
        sql = "UPDATE users SET is_eligible =? WHERE email =?"
        st = ibm_db.prepare(conn, sql)
        ibm_db.bind_param(st, 1, "False")
        ibm_db.bind_param(st, 2, email)
        ibm_db.execute(st)
        sqll = "UPDATE eligible SET don_date =? WHERE elig_email =?"
        stmtt = ibm_db.prepare(conn, sqll)
        ibm_db.bind_param(stmtt, 1, request.form['dondate'])
        ibm_db.bind_param(stmtt, 2, email)
        ibm_db.execute(stmtt)
        sll = "INSERT INTO accepted (r_id,donor_email,donor_name,person_name,donate_date,hospital_id,b_group,prior) VALUES (?, ?, ?, ?, ?, ?, ?, ?)"
        stm = ibm_db.prepare(conn, sll)
        ibm_db.bind_param(stm, 1, int(session["chec"]))
        ibm_db.bind_param(stm, 2, email)
        ibm_db.bind_param(stm, 3, session["uname"])
        ibm_db.bind_param(stm, 4, p_name)
        ibm_db.bind_param(stm, 5, session["donatedate"])
        ibm_db.bind_param(stm, 6, h_id)
        ibm_db.bind_param(stm, 7, b_g)
        ibm_db.bind_param(stm, 8, p.upper())
        ibm_db.execute(stm)
        sendamail(email,"Thank you for your Donation :)")
        session["updated"]=" Not eligible"
        return redirect('/dashboard')
    else:
        return redirect('/update_elig')

@app.route('/donate',methods =['GET', 'POST'])
def donate():
    sqll = "SELECT * FROM eligible,users WHERE users.email =? AND users.is_eligible =?"
    stmtt = ibm_db.prepare(conn, sqll)
    ibm_db.bind_param(stmtt, 1, session["email"])
    ibm_db.bind_param(stmtt, 2, "True")
    ibm_db.execute(stmtt)
    account = ibm_db.fetch_assoc(stmtt)
    if account:
        session['bg']=ibm_db.result(stmtt,2)
        sql = "SELECT * FROM prequest,users WHERE prequest.blood_group =? AND prequest.location =? AND users.is_eligible =? AND prequest.priority =? AND prequest.blood_camp =? ORDER BY prequest.request_date ASC"
        stmt = ibm_db.prepare(conn, sql)
        ibm_db.bind_param(stmt, 1, session["bg"])
        ibm_db.bind_param(stmt, 2, session["city"])
        ibm_db.bind_param(stmt, 3, "True")
        ibm_db.bind_param(stmt, 4, "HIGH")
        ibm_db.bind_param(stmt, 5, "NO")
        ibm_db.execute(stmt)
        items=[]
        tuple = True
        while tuple != False:
            tuple = ibm_db.fetch_tuple(stmt)
            items.append(tuple)
        print(items)
        items=list(filter(None,items))
        sqll = "SELECT * FROM prequest,users WHERE prequest.blood_group =? AND prequest.location =? AND users.is_eligible =? AND prequest.priority =? AND prequest.blood_camp =? ORDER BY prequest.request_date ASC"
        stmttt = ibm_db.prepare(conn, sqll)
        ibm_db.bind_param(stmttt, 1, session["bg"])
        ibm_db.bind_param(stmttt, 2, session["city"])
        ibm_db.bind_param(stmttt, 3, "True")
        ibm_db.bind_param(stmttt, 4, "LOW")
        ibm_db.bind_param(stmttt, 5, "NO")
        ibm_db.execute(stmttt)
        item=[]
        tuple1 = True
        while tuple1 != False:
            tuple1 = ibm_db.fetch_tuple(stmttt)
            item.append(tuple1)
        item=list(filter(None,item))
        sq = "SELECT * FROM prequest,users WHERE prequest.location =? AND users.is_eligible =? AND prequest.blood_camp =? ORDER BY prequest.request_date ASC"
        stm = ibm_db.prepare(conn, sq)
        ibm_db.bind_param(stm, 1, session["city"])
        ibm_db.bind_param(stm, 2, "True")
        ibm_db.bind_param(stm, 3, "YES")
        ibm_db.execute(stm)
        ite=[]
        tuple2 = True
        while tuple2 != False:
            tuple2 = ibm_db.fetch_tuple(stm)
            ite.append(tuple2)
        print(ite)
        ite=list(filter(None,ite))
        return render_template("donate.html",items=items,item=item,ite=ite)
    return render_template("ne.html")

@app.route('/locate',methods =['GET', 'POST'])
def locate():
    ma=request.form['map']
    sql = "SELECT * FROM prequest WHERE prequest.request_id =? AND prequest.blood_camp =? ORDER BY request_date ASC"
    stmt = ibm_db.prepare(conn, sql)
    ibm_db.bind_param(stmt, 1, ma)
    ibm_db.bind_param(stmt, 2, "YES")
    loc=ibm_db.result(stmt,4)
    nav(loc)
    return render_template('index.html')

@app.route('/health',methods =['GET', 'POST'])
def health():
    sqll = "SELECT * FROM eligible WHERE eligible.elig_email =?"
    stmtt = ibm_db.prepare(conn, sqll)
    ibm_db.bind_param(stmtt, 1, session["email"])
    ibm_db.execute(stmtt)
    account = ibm_db.fetch_tuple(stmtt)
    if account:
        return render_template("health.html",i=account)

@app.route('/dashboard')
def dash():
    if not session.get("uname"):
        return redirect('/check')   
    else:
        pa_name=""
        hosp_na=""
        hosp_id=""
        sqll = "SELECT * FROM eligible WHERE elig_email =?"
        stmt = ibm_db.prepare(conn, sqll)
        ibm_db.bind_param(stmt, 1, session["email"])
        ibm_db.execute(stmt)
        account = ibm_db.fetch_assoc(stmt)
        if account:
            bg=ibm_db.result(stmt,2)
            ldate=ibm_db.result(stmt,8)
        sql = "SELECT accepted.person_name,prequest.hosp_name,prequest.hosp_id  FROM accepted,prequest WHERE accepted.donor_email =?"
        stmtt = ibm_db.prepare(conn, sql)
        ibm_db.bind_param(stmtt, 1, session['email'])
        ibm_db.execute(stmtt)
        accounta = ibm_db.fetch_assoc(stmtt)
        if accounta:
            pa_name=ibm_db.result(stmtt,0)
            hosp_na=ibm_db.result(stmtt,1)
            hosp_id=ibm_db.result(stmtt,2)
        return render_template('dashboard.html',bg=bg,bdd=ldate,pa_name=pa_name,hosp_na=hosp_na,hosp_id=hosp_id)

@app.route('/hospitaldashboard')
def hospitaldashboard():
    if not session.get("uid"):
        return redirect("/hospitalcheck")
    else:
        sql = "SELECT * FROM accepted WHERE accepted.hospital_id =? ORDER BY accepted.donate_date ASC"
        stmt = ibm_db.prepare(conn, sql)
        ibm_db.bind_param(stmt, 1, session['hospid'])
        ibm_db.execute(stmt)
        item=[]
        tuple = True
        while tuple != False:
            tuple = ibm_db.fetch_tuple(stmt) 
            item.append(tuple)
        item=list(filter(None,item))
        session["item"]=item
    return render_template('hospitaldashboard.html',item=item)

@app.route('/hospitalsend')
def hospsend():
    if not session.get("uid"):
        return redirect("/hospitalcheck")
    return render_template('hospreq.html')

@app.route('/delete',methods =['GET', 'POST'])
def dele():
    delet=request.form['delete']
    sql = "DELETE FROM accepted WHERE accepted.donor_email =?"
    stmt = ibm_db.prepare(conn, sql)
    ibm_db.bind_param(stmt, 1, delet)
    ibm_db.execute(stmt)
    return redirect('\hospitaldashboard')

@app.route('/elig')
def elig():
    if not session.get("email"):
        return redirect("/check")
    return render_template('update_eli.html')

@app.route('/eligi')
def eligi():
    if not session.get("email"):
        return redirect("/check")
    return render_template('eligibilty.html')

@app.route('/logout')
def logout():
   session["uname"]=None
   session["items"]=None
   session["item"]=None
   session["bg"]=None
   session["city"]=None
   session["mobile"]=None
   session["email"]=None
   session["weight"]=None
   session["height"]=None
   session["bmi"]=None
   session["chol"]=None
   session["bp"]=None
   session["don_date"]=None
   session["certificate"]=None
   session["ck1"]=None
   session["ck2"]=None
   session["ck3"]=None
   session["uid"]=None
   return redirect('/')

if __name__ == '__main__':
   app.run(host='0.0.0.0',debug=True)